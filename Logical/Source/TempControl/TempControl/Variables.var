VAR
	TempInReal : REAL; (*Measured temperature in celcius degrees*)
	TempControlWidgetsEnable : BOOL := FALSE; (*Defines if temperature control widgets can be used*)
	RestoreSettings : BOOL := FALSE; (*If true, displeyed PID parameters are restored*)
	MTBasicsPWMHeater : MTBasicsPWM := (Enable:=FALSE,Period:=0.1,DutyCycle:=0.0); (*PWM block for heater*)
	MTBasicsPWMFan : MTBasicsPWM := (Enable:=FALSE,Period:=0.1,DutyCycle:=0.0); (*PWM block for fan*)
	MpTempController_0 : MpTempController; (*Function block responsible for  temperature controll*)
	MpTempControllerParType_1 : MpTempControllerParType; (*Displayed PID parameters*)
END_VAR
VAR RETAIN
	MpTempControllerParType_0 : MpTempControllerParType := (PID:=(Heat:=(ProportionalGain:=15.23996,IntegrationTime:=74.8946152,DerivativeTime:=7.86393452,FilterTime:=0.786393464),Cool:=(ProportionalGain:=0,IntegrationTime:=0,DerivativeTime:=0,FilterTime:=0),IntegratorPreloading:=0),Tuning:=(Mode:=mpTEMP_TUNING_MODE_OSC_HEAT_COOL,SetPointHeat:=45,SetPointCool:=35),Profile:=(Heat:=(SlewRate:=0.185037389,FilterTime:=77.42902,DelayTime:=7,QuickStart:=FALSE),Cool:=(SlewRate:=0.03187467,FilterTime:=91.55094,DelayTime:=7,QuickStart:=FALSE)),ToleranceBand:=(Lower:=0.3,Upper:=0.3),Hysteresis:=(Mode:=mpTEMP_HYSTERESIS_ON,Band:=(HeatToCool:=1.0,CoolToHeat:=1.0))); (*Temperature controller parameters*)
END_VAR
VAR
	ManualON : BOOL := FALSE; (*If true, PID controller is not used, the outputs are supplied with the signals from PWM blocks*)
END_VAR
VAR CONSTANT
	IntToRealScaller : REAL := 10.0; (*Constant used to convert tempretature from int (directly from at2222) to real (in celcius degrees)*)
END_VAR
VAR
	HeaterPWMDuty : REAL := 0.0; (*Duty in % for heater PWM*)
	FanPWMDuty : REAL := 0.0; (*Duty in % for fan PWM*)
	AutoTune : BOOL := FALSE; (*If true, controller tuning is activated*)
	ApplySettings : BOOL := FALSE; (*If true, displeyed PID parameters are applied to controller*)
	InfoLabelIndex : USINT := 0; (*Defines info displayed on main page: 0 - auto mode; 1 - manual mode; 2 - tuning in progress; 3 - emergency stop*)
	ShowTuningDoneDialog : BOOL := FALSE; (*If true, tuning done dialog is displayed.*)
	TurnOnHeater : BOOL; (*Variable that switches the fan on (not retain)*)
	TurnOnFan : BOOL; (*Variable that switches the heater on (not retain)*)
	Tank3Temp : INT; (*Current temperature in the tank 3 (not retain)*)
	MpTempControllerConfig_0 : MpTempControllerConfig; (*The function block is used to modify a MpTempController configuration*)
	MpTempControllerConfigType_0 : MpTempControllerConfigType := (Type:=mpTEMP_ZONE_TYPE_HEAT,AmbientTemperature:=30,ProfileMode:=mpTEMP_PROFILE_MODE_TIME_OPT); (*This data type contains configuration parameters for the controller and the system*)
	MpTempTuningType_0 : MpTempTuningType := (Mode:=mpTEMP_TUNING_MODE_HEAT_COOL,SetPointHeat:=45,SetPointCool:=35); (*This data type contains parameters for tuning*)
	NameOfMode : STRING[80]; (*Name of the mode used in the visualization*)
	StepHeatCool : StepEnum; (*Steps when confirming controller parameters*)
	StepHeat : StepEnum; (*Steps when confirming controller parameters*)
	FirstUpload : BOOL := FALSE; (*Variable enabling correct uploading of controller parameters immediately after transfer*)
END_VAR
